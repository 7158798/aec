<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hengxunda.dao.mapper.WalletInfoMapper">
    <resultMap id="BaseResultMap" type="com.hengxunda.dao.entity.WalletInfo">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="balance" property="balance" jdbcType="DECIMAL"/>
        <result column="frozen_blance" property="frozenBlance" jdbcType="DECIMAL"/>
        <result column="bond" property="bond" jdbcType="DECIMAL"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="wallet_password" property="walletPassword" jdbcType="VARCHAR"/>
        <result column="wallet_file" property="walletFile" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user_id, status, type, balance, frozen_blance, bond, address, wallet_password, 
    wallet_file, create_time, update_user, update_time
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hengxunda.dao.entity.WalletInfoExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_wallet_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from t_wallet_info
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_wallet_info
    where id = #{id,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="com.hengxunda.dao.entity.WalletInfoExample">
        delete from t_wallet_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.hengxunda.dao.entity.WalletInfo">
    insert into t_wallet_info (id, user_id, status, 
      type, balance, frozen_blance, 
      bond, address, wallet_password, 
      wallet_file, create_time, update_user, 
      update_time)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{type,jdbcType=VARCHAR}, #{balance,jdbcType=DECIMAL}, #{frozenBlance,jdbcType=DECIMAL}, 
      #{bond,jdbcType=DECIMAL}, #{address,jdbcType=VARCHAR}, #{walletPassword,jdbcType=VARCHAR}, 
      #{walletFile,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.hengxunda.dao.entity.WalletInfo">
        insert into t_wallet_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="balance != null">
                balance,
            </if>
            <if test="frozenBlance != null">
                frozen_blance,
            </if>
            <if test="bond != null">
                bond,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="walletPassword != null">
                wallet_password,
            </if>
            <if test="walletFile != null">
                wallet_file,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="balance != null">
                #{balance,jdbcType=DECIMAL},
            </if>
            <if test="frozenBlance != null">
                #{frozenBlance,jdbcType=DECIMAL},
            </if>
            <if test="bond != null">
                #{bond,jdbcType=DECIMAL},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="walletPassword != null">
                #{walletPassword,jdbcType=VARCHAR},
            </if>
            <if test="walletFile != null">
                #{walletFile,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.hengxunda.dao.entity.WalletInfoExample"
            resultType="java.lang.Integer">
        select count(*) from t_wallet_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_wallet_info
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.balance != null">
                balance = #{record.balance,jdbcType=DECIMAL},
            </if>
            <if test="record.frozenBlance != null">
                frozen_blance = #{record.frozenBlance,jdbcType=DECIMAL},
            </if>
            <if test="record.bond != null">
                bond = #{record.bond,jdbcType=DECIMAL},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.walletPassword != null">
                wallet_password = #{record.walletPassword,jdbcType=VARCHAR},
            </if>
            <if test="record.walletFile != null">
                wallet_file = #{record.walletFile,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateUser != null">
                update_user = #{record.updateUser,jdbcType=VARCHAR},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_wallet_info
        set id = #{record.id,jdbcType=VARCHAR},
        user_id = #{record.userId,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        balance = #{record.balance,jdbcType=DECIMAL},
        frozen_blance = #{record.frozenBlance,jdbcType=DECIMAL},
        bond = #{record.bond,jdbcType=DECIMAL},
        address = #{record.address,jdbcType=VARCHAR},
        wallet_password = #{record.walletPassword,jdbcType=VARCHAR},
        wallet_file = #{record.walletFile,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_user = #{record.updateUser,jdbcType=VARCHAR},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.hengxunda.dao.entity.WalletInfo">
        update t_wallet_info
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="balance != null">
                balance = #{balance,jdbcType=DECIMAL},
            </if>
            <if test="frozenBlance != null">
                frozen_blance = #{frozenBlance,jdbcType=DECIMAL},
            </if>
            <if test="bond != null">
                bond = #{bond,jdbcType=DECIMAL},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="walletPassword != null">
                wallet_password = #{walletPassword,jdbcType=VARCHAR},
            </if>
            <if test="walletFile != null">
                wallet_file = #{walletFile,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hengxunda.dao.entity.WalletInfo">
    update t_wallet_info
    set user_id = #{userId,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=DECIMAL},
      frozen_blance = #{frozenBlance,jdbcType=DECIMAL},
      bond = #{bond,jdbcType=DECIMAL},
      address = #{address,jdbcType=VARCHAR},
      wallet_password = #{walletPassword,jdbcType=VARCHAR},
      wallet_file = #{walletFile,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>