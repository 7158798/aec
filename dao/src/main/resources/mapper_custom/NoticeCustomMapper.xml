<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hengxunda.dao.mapper_custom.NoticeCustomMapper" >
  <resultMap id="BaseResultMap" type="com.hengxunda.dao.entity.Notice" extends="com.hengxunda.dao.mapper.NoticeMapper.BaseResultMap" >

  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.hengxunda.dao.entity.Notice" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>


    <sql id="Base_Column_List" >
    id, user_id, notice_type_id, title, summary, content, url, status, create_user, create_time,
    update_user, update_time
  </sql>

    <select id="getNoticeForWeb" resultMap="ResultMapWithBLOBs" parameterType="com.hengxunda.common.utils.Page">
        select <include refid="Base_Column_List"/>
        from t_notice
        where
        notice_type_id = 3
        order by create_time desc
        limit #{page.beginNo, jdbcType=INTEGER},#{page.limit, jdbcType=INTEGER}
    </select>

    <select id="countNoticeForWeb" resultType="java.lang.Integer" >
        select
        count(0)
        from t_notice
        where
        notice_type_id = 3
    </select>

    <update id="statusSwitch"  >
        update t_notice
        set status = #{status,jdbcType=INTEGER}
        where id = #{id,jdbcType=VARCHAR}
        and status <![CDATA[ <> ]]> #{status,jdbcType=INTEGER}
    </update>

    <update id="updateNoticeUserLookStatusByNoticeId">
        update t_notice_user_look set status = #{status} where notice_id = #{noticeId}
    </update>

  <select id="getNotices" resultType="com.hengxunda.dao.po.NoticePo">
      select * from (
        SELECT
            n.id,
            n.notice_type_id noticeTypeId,
            n.title,
            n.summary,
            n.content,
            n.url,
            n.status,
            if(tnul.id is null,0,1) isLook,
            n.create_time createTime
        FROM
            t_notice n
        left join t_notice_user_look 	tnul on tnul.notice_id = n.id and tnul.status=0 and tnul.user_id = #{userId}
        where n.user_id = #{userId} and n.status=0
        union
        SELECT
            n.id,
            n.notice_type_id noticeTypeId,
            n.title,
            n.summary,
            n.content,
            n.url,
            n.status,
            if(tnul.id is null,0,1) isLook,n.create_time
        FROM
            t_notice n
        left join t_notice_user_look 	tnul on tnul.notice_id = n.id and tnul.status=0 and tnul.user_id = #{userId}
        where n.user_id ='' and n.status=0
        ) t
      ORDER BY t.createTime desc
      limit #{startRow},#{rows}
  </select>

  <select id="countNotices" resultType="java.lang.Integer">
    select count(1) from (
        SELECT
            n.id,
            n.notice_type_id noticeTypeId,
            n.title,
            n.summary,
            n.content,
            n.url,
            n.status,
            if(tnul.id is null,0,1) isLook,n.create_time
        FROM
            t_notice n
        left join t_notice_user_look 	tnul on tnul.notice_id = n.id and tnul.status=0 and tnul.user_id = #{userId}
        where n.user_id = #{userId} and n.status=0
        union
        SELECT
            n.id,
            n.notice_type_id noticeTypeId,
            n.title,
            n.summary,
            n.content,
            n.url,
            n.status,
            if(tnul.id is null,0,1) isLook,n.create_time
        FROM
            t_notice n
        left join t_notice_user_look 	tnul on tnul.notice_id = n.id and tnul.status=0 and tnul.user_id = #{userId}
        where n.user_id ='' and n.status=0
        ) t
  </select>

    <select id="getNoReadNumber" resultType="java.lang.Integer">
            SELECT
        COUNT(*) - (
            SELECT
                COUNT(*)
            FROM
                t_notice_user_look
            WHERE
                status=0 and user_id = #{userId}
        ) AS count
    FROM
        t_notice
    WHERE
        status=0 and (user_id = #{userId} OR user_id = '');
    </select>


    <resultMap id="NoticeUserLookBaseResultMap" type="com.hengxunda.dao.entity.NoticeUserLook" >
        <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="user_id" property="userId" jdbcType="VARCHAR" />
        <result column="notice_id" property="noticeId" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    </resultMap>

    <select id="getNoticeUserLookByUserIdAndNoticeId" resultMap="NoticeUserLookBaseResultMap">
        select * from t_notice_user_look where user_id = #{userId} and notice_id = #{noticeId}
    </select>

</mapper>