<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hengxunda.dao.mapper.WalletRecordMapper" >
  <resultMap id="BaseResultMap" type="com.hengxunda.dao.entity.WalletRecord" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="transaction_pair" property="transactionPair" jdbcType="VARCHAR" />
    <result column="from_id" property="fromId" jdbcType="VARCHAR" />
    <result column="to_id" property="toId" jdbcType="VARCHAR" />
    <result column="from_address" property="fromAddress" jdbcType="VARCHAR" />
    <result column="to_address" property="toAddress" jdbcType="VARCHAR" />
    <result column="from_amount" property="fromAmount" jdbcType="DECIMAL" />
    <result column="to_amount" property="toAmount" jdbcType="DECIMAL" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="rate" property="rate" jdbcType="VARCHAR" />
    <result column="operate" property="operate" jdbcType="INTEGER" />
    <result column="descri" property="descri" jdbcType="VARCHAR" />
    <result column="source" property="source" jdbcType="VARCHAR" />
    <result column="trans_type" property="transType" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, transaction_pair, from_id, to_id, from_address, to_address, from_amount, to_amount, 
    fee, rate, operate, descri, source, trans_type, create_time, update_user, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hengxunda.dao.entity.WalletRecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_wallet_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_wallet_record
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_wallet_record
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.hengxunda.dao.entity.WalletRecordExample" >
    delete from t_wallet_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hengxunda.dao.entity.WalletRecord" >
    insert into t_wallet_record (id, transaction_pair, from_id, 
      to_id, from_address, to_address, 
      from_amount, to_amount, fee, 
      rate, operate, descri, 
      source, trans_type, create_time, 
      update_user, update_time)
    values (#{id,jdbcType=VARCHAR}, #{transactionPair,jdbcType=VARCHAR}, #{fromId,jdbcType=VARCHAR}, 
      #{toId,jdbcType=VARCHAR}, #{fromAddress,jdbcType=VARCHAR}, #{toAddress,jdbcType=VARCHAR}, 
      #{fromAmount,jdbcType=DECIMAL}, #{toAmount,jdbcType=DECIMAL}, #{fee,jdbcType=DECIMAL}, 
      #{rate,jdbcType=VARCHAR}, #{operate,jdbcType=INTEGER}, #{descri,jdbcType=VARCHAR}, 
      #{source,jdbcType=VARCHAR}, #{transType,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.hengxunda.dao.entity.WalletRecord" >
    insert into t_wallet_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="transactionPair != null" >
        transaction_pair,
      </if>
      <if test="fromId != null" >
        from_id,
      </if>
      <if test="toId != null" >
        to_id,
      </if>
      <if test="fromAddress != null" >
        from_address,
      </if>
      <if test="toAddress != null" >
        to_address,
      </if>
      <if test="fromAmount != null" >
        from_amount,
      </if>
      <if test="toAmount != null" >
        to_amount,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="rate != null" >
        rate,
      </if>
      <if test="operate != null" >
        operate,
      </if>
      <if test="descri != null" >
        descri,
      </if>
      <if test="source != null" >
        source,
      </if>
      <if test="transType != null" >
        trans_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="transactionPair != null" >
        #{transactionPair,jdbcType=VARCHAR},
      </if>
      <if test="fromId != null" >
        #{fromId,jdbcType=VARCHAR},
      </if>
      <if test="toId != null" >
        #{toId,jdbcType=VARCHAR},
      </if>
      <if test="fromAddress != null" >
        #{fromAddress,jdbcType=VARCHAR},
      </if>
      <if test="toAddress != null" >
        #{toAddress,jdbcType=VARCHAR},
      </if>
      <if test="fromAmount != null" >
        #{fromAmount,jdbcType=DECIMAL},
      </if>
      <if test="toAmount != null" >
        #{toAmount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="rate != null" >
        #{rate,jdbcType=VARCHAR},
      </if>
      <if test="operate != null" >
        #{operate,jdbcType=INTEGER},
      </if>
      <if test="descri != null" >
        #{descri,jdbcType=VARCHAR},
      </if>
      <if test="source != null" >
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="transType != null" >
        #{transType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hengxunda.dao.entity.WalletRecordExample" resultType="java.lang.Integer" >
    select count(*) from t_wallet_record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_wallet_record
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.transactionPair != null" >
        transaction_pair = #{record.transactionPair,jdbcType=VARCHAR},
      </if>
      <if test="record.fromId != null" >
        from_id = #{record.fromId,jdbcType=VARCHAR},
      </if>
      <if test="record.toId != null" >
        to_id = #{record.toId,jdbcType=VARCHAR},
      </if>
      <if test="record.fromAddress != null" >
        from_address = #{record.fromAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.toAddress != null" >
        to_address = #{record.toAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.fromAmount != null" >
        from_amount = #{record.fromAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.toAmount != null" >
        to_amount = #{record.toAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.fee != null" >
        fee = #{record.fee,jdbcType=DECIMAL},
      </if>
      <if test="record.rate != null" >
        rate = #{record.rate,jdbcType=VARCHAR},
      </if>
      <if test="record.operate != null" >
        operate = #{record.operate,jdbcType=INTEGER},
      </if>
      <if test="record.descri != null" >
        descri = #{record.descri,jdbcType=VARCHAR},
      </if>
      <if test="record.source != null" >
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.transType != null" >
        trans_type = #{record.transType,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_wallet_record
    set id = #{record.id,jdbcType=VARCHAR},
      transaction_pair = #{record.transactionPair,jdbcType=VARCHAR},
      from_id = #{record.fromId,jdbcType=VARCHAR},
      to_id = #{record.toId,jdbcType=VARCHAR},
      from_address = #{record.fromAddress,jdbcType=VARCHAR},
      to_address = #{record.toAddress,jdbcType=VARCHAR},
      from_amount = #{record.fromAmount,jdbcType=DECIMAL},
      to_amount = #{record.toAmount,jdbcType=DECIMAL},
      fee = #{record.fee,jdbcType=DECIMAL},
      rate = #{record.rate,jdbcType=VARCHAR},
      operate = #{record.operate,jdbcType=INTEGER},
      descri = #{record.descri,jdbcType=VARCHAR},
      source = #{record.source,jdbcType=VARCHAR},
      trans_type = #{record.transType,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hengxunda.dao.entity.WalletRecord" >
    update t_wallet_record
    <set >
      <if test="transactionPair != null" >
        transaction_pair = #{transactionPair,jdbcType=VARCHAR},
      </if>
      <if test="fromId != null" >
        from_id = #{fromId,jdbcType=VARCHAR},
      </if>
      <if test="toId != null" >
        to_id = #{toId,jdbcType=VARCHAR},
      </if>
      <if test="fromAddress != null" >
        from_address = #{fromAddress,jdbcType=VARCHAR},
      </if>
      <if test="toAddress != null" >
        to_address = #{toAddress,jdbcType=VARCHAR},
      </if>
      <if test="fromAmount != null" >
        from_amount = #{fromAmount,jdbcType=DECIMAL},
      </if>
      <if test="toAmount != null" >
        to_amount = #{toAmount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="rate != null" >
        rate = #{rate,jdbcType=VARCHAR},
      </if>
      <if test="operate != null" >
        operate = #{operate,jdbcType=INTEGER},
      </if>
      <if test="descri != null" >
        descri = #{descri,jdbcType=VARCHAR},
      </if>
      <if test="source != null" >
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="transType != null" >
        trans_type = #{transType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hengxunda.dao.entity.WalletRecord" >
    update t_wallet_record
    set transaction_pair = #{transactionPair,jdbcType=VARCHAR},
      from_id = #{fromId,jdbcType=VARCHAR},
      to_id = #{toId,jdbcType=VARCHAR},
      from_address = #{fromAddress,jdbcType=VARCHAR},
      to_address = #{toAddress,jdbcType=VARCHAR},
      from_amount = #{fromAmount,jdbcType=DECIMAL},
      to_amount = #{toAmount,jdbcType=DECIMAL},
      fee = #{fee,jdbcType=DECIMAL},
      rate = #{rate,jdbcType=VARCHAR},
      operate = #{operate,jdbcType=INTEGER},
      descri = #{descri,jdbcType=VARCHAR},
      source = #{source,jdbcType=VARCHAR},
      trans_type = #{transType,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>